spring:
  application:
    name: choerodon-message
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hzero_message?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:root}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    jedis:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}

feign:
  hystrix:
    enabled: true

hystrix:
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量，默认10
      coreSize: ${HYSTRIX_THREADPOOL_DEFAULT_CORE_SIZE:128}
      # 最大执行线程数
      maximumSize: ${HYSTRIX_THREADPOOL_DEFAULT_MAXIMUM_SIZE:256}
  command:
    default:
      execution:
        isolation:
          thread:
            # hystrix熔断时间，12秒，需大于feign/ribbon的超时时间
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:40000}

ribbon:
  # Ribbon从DiscoveryClient同步Server的间隔时间，默认30秒
  ServerListRefreshInterval: ${RIBBON_SERVER_LIST_REFRESH_INTERVAL:10000}
  # 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 客户端连接超时时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:10000}
  # 默认只重试 GET，设置为true时将重试所有类型，如 POST、PUT、DELETE
  # 重试对Feign生效，对RestTemplate不生效，RestTemplate要重试需加入spring-retry依赖
  OkToRetryOnAllOperations: false
  # 同一个Server重试次数
  MaxAutoRetries: 0
  # 最多重试几个Server
  MaxAutoRetriesNextServer: 1

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000

mapper:
  not-empty: true

choerodon:
  saga:
    service: choerodon-asgard
    consumer:
      enabled: true # 是否启用消费端
      thread-num: 5  # 消费线程数
      max-poll-size: 200 # 每次拉取的最大消息数量
      poll-interval-ms: 1000 # 拉取消息的间隔(毫秒)，默认1000毫秒
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      thread-num: 1 # 任务调度消费线程数
      poll-interval-ms: 1000 # 拉取间隔，默认1000毫秒

hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  websocket:
    heartbeat: heartBeat
    # 用于连接websocket的路径
    websocket: /websocket
    easy-mode: ${HZERO_WEBSOCKET_EASY_MODE:false}
    # 与当前服务的redis数据库一致
    redisDb: ${SPRING_REDIS_DATABASE:1}
    secretKey: hzero
    # 获取用户信息的接口
    oauthUrl: http://choerodon-oauth/oauth/api/user
  lov:
    sql:
      enabled: true
    value:
      enabled: true
  message:
    retry:
      # 重试策略 fixed-固定时间 increment-递增 random-随机 fibonacci-斐波那契数列(max-time 数列位置) exponential-指数(2的重试次数次方*基础时间)
      strategy: increment
      # 基础时间(秒)
      base-time: 0
      # 最大时间(秒)
      max-time: 3
    message-redis-database: ${SPRING_REDIS_DATABASE:1}
    sms:
      fake-action: ${HZERO_SMS_FAKE:false}
    fly-book:
      send-message-url: https://open.feishu.cn/open-apis/message/v4/send/
      access-token-url: https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal/
  kms:
    load-key-from-server: false # 需要在发版中去除
  cache-value:
    enable: true
  resource:
    # 匹配的资源才会解析JwtToken便于得到UserDetails
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/hzero/*,/hmsg/v1/*,/hmsg/hzero/*,/choerodon/v1/*}

logging:
  level:
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero.boot.message.feign: ${LOG_LEVEL:info}
    org.hzero.message.infra.mapper: ${LOG_LEVEL:info}
